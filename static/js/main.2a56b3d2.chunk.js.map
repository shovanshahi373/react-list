{"version":3,"sources":["styles/main.js","components/todo.js","components/todolist.js","components/input.js","components/overlay.js","helpers/main.js","App.js","index.js"],"names":["Button","styled","button","Section","section","InputField","input","TextArea","textarea","Pill","div","Checkbox","Mesg","CancelButton","Todo","item","title","description","id","completed","editTodo","style","display","justifyContent","alignItems","marginTop","borderBottom","padding","textDecoration","length","split","slice","join","onClick","bind","Todolist","list","map","key","color","letterSpacing","Ref","handleChange","handleSubmit","showInput","emptyTodo","method","flexDirection","type","ref","name","onChange","e","placeholder","cols","rows","className","Overlay","selectedTodo","lastModified","todo","updateTodo","deleteTodo","checkboxRef","showOverlay","setTodo","getTime","msg","runTime","useState","gap","setGap","useEffect","setInterval","clearInterval","action","colspacing","value","backgroundColor","checked","hidden","margin","stampedTime","time","timeElapsed","Date","now","Math","floor","arrangeList","arr","compArr","filter","el","pendArr","App","setList","showOverLay","SetShowOVerLay","showInputOverLay","SetShowInputOverLay","setSelectedTodo","harvestedList","localStorage","getItem","JSON","parse","setItem","stringify","a","target","console","log","useRef","preventDefault","oldTitle","oldDesc","oldStatus","newTitle","newDesc","newStatus","alert","cloneList","selectedTodoIndex","findIndex","window","confirm","delItem","newTodo","uuid","newList","width","zIndex","border","borderRadius","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a56b3d2.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  background-color: hsla(314, 35%, 50%, 1);\r\n  color: white;\r\n  border: none;\r\n  margin-right: 20px;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  border-radius: 3px;\r\n  transition: 0.4s background-color;\r\n  &:hover {\r\n    background-color: hsla(314, 35%, 50%, 0.6);\r\n  }\r\n`;\r\n\r\nconst Section = styled.section`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  width: 100%;\r\n  background-color: hsla(10, 100%, 0%, 0.9);\r\n  color: black;\r\n`;\r\n\r\nconst InputField = styled.input`\r\n  border: none;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  outline: none;\r\n  width: calc(100% - 50px);\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  border: none;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  outline: none;\r\n  width: calc(100% - 50px);\r\n`;\r\n\r\nconst Pill = styled.div`\r\n  padding: 2px 5px;\r\n  display: inline-block;\r\n  text-align: center;\r\n  background-color: hsla(314, 35%, 50%, 1);\r\n  border-top-left-radius: 20px;\r\n  border-top-right-radius: 20px;\r\n  border-bottom-left-radius: 20px;\r\n  border-bottom-right-radius: 20px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n`;\r\n\r\nconst Checkbox = styled.div`\r\n  background-color: white;\r\n  height: 30px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 30px;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n  box-shadow: 0 0 0 4px hsla(314, 35%, 50%, 1) inset;\r\n  position: relative;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Mesg = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: whitesmoke;\r\n  padding: 10px 20px;\r\n  border-radius: 3px;\r\n  min-width: 30%;\r\n`;\r\n\r\nconst CancelButton = styled.button`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  height: 30px;\r\n  transition: background-color 0.2s;\r\n  width: 30px;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background-color: red;\r\n  color: white;\r\n  &:hover {\r\n    background-color: rgba(255, 0, 0, 0.6);\r\n  }\r\n`;\r\n\r\nexport {\r\n  Button,\r\n  Section,\r\n  Mesg,\r\n  Checkbox,\r\n  TextArea,\r\n  InputField,\r\n  Pill,\r\n  CancelButton\r\n};\r\n","import React from \"react\";\r\nimport { Button } from \"../styles/main\";\r\n\r\nconst Todo = ({ item: { title, description, id, completed }, editTodo }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          marginTop: \"3px\",\r\n          borderBottom: \"1px solid #ccc\",\r\n          padding: \"10px 0\"\r\n        }}\r\n      >\r\n        <div>\r\n          <p>\r\n            <b>title:{\"  \"}</b>\r\n            <span\r\n              style={{ textDecoration: completed ? \"line-through\" : \"initial\" }}\r\n            >\r\n              {title}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>description:{\"  \"}</b>\r\n            {description.length > 25\r\n              ? description\r\n                  .split(\"\")\r\n                  .slice(0, 25)\r\n                  .join(\"\") + \"...\"\r\n              : description}\r\n          </p>\r\n        </div>\r\n        <Button onClick={editTodo.bind(this, id)}>EDIT</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./todo\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Todolist = ({ list, editTodo }) => {\r\n  if (list.length > 0) {\r\n    return list.map(item => (\r\n      <>\r\n        <Todo item={item} key={item.id} editTodo={editTodo} />\r\n      </>\r\n    ));\r\n  } else {\r\n    return (\r\n      <p\r\n        style={{\r\n          color: \"#ccc\",\r\n          letterSpacing: \"4px\"\r\n        }}\r\n      >\r\n        nothing to show...\r\n      </p>\r\n    );\r\n  }\r\n};\r\n\r\nTodolist.propTypes = {\r\n  list: PropTypes.array\r\n};\r\n\r\nexport default Todolist;\r\n","import React from \"react\";\r\nimport {\r\n  Section,\r\n  Mesg,\r\n  Button,\r\n  InputField,\r\n  TextArea,\r\n  CancelButton\r\n} from \"../styles/main\";\r\nconst input = ({\r\n  Ref,\r\n  // todo: { title },\r\n  handleChange,\r\n  handleSubmit,\r\n  showInput,\r\n  emptyTodo\r\n}) => {\r\n  const style = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"flex-start\",\r\n    flexDirection: \"column\"\r\n  };\r\n  return (\r\n    <Section>\r\n      <Mesg>\r\n        <form method='POST' style={style}>\r\n          <InputField\r\n            type='text'\r\n            ref={Ref}\r\n            name={\"title\"}\r\n            // value={title}\r\n            onChange={e => handleChange(e)}\r\n            placeholder='add a todo...'\r\n            // onKeyPress={handlesubmitonenter}\r\n          />\r\n          <TextArea\r\n            name={\"description\"}\r\n            cols='30'\r\n            rows='10'\r\n            placeholder={\"description...\"}\r\n            onChange={e => handleChange(e)}\r\n          ></TextArea>\r\n          <div>\r\n            <Button\r\n              onClick={e => {\r\n                handleSubmit(e);\r\n              }}\r\n            >\r\n              add todo\r\n            </Button>\r\n            <CancelButton\r\n              onClick={() => {\r\n                emptyTodo({ title: \"\", description: \"\" });\r\n                showInput(false);\r\n              }}\r\n            >\r\n              <i className='fas fa-times fa-2x' title='cancel'></i>\r\n            </CancelButton>\r\n          </div>\r\n        </form>\r\n      </Mesg>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Section,\r\n  Mesg,\r\n  Checkbox,\r\n  InputField,\r\n  TextArea,\r\n  Pill,\r\n  CancelButton\r\n} from \"../styles/main\";\r\n\r\nexport default function Overlay({\r\n  selectedTodo: { id, lastModified },\r\n  todo,\r\n  updateTodo,\r\n  deleteTodo,\r\n  handleChange,\r\n  checkboxRef,\r\n  showOverlay,\r\n  setTodo,\r\n  getTime\r\n}) {\r\n  const { msg, runTime } = getTime(lastModified);\r\n  const [gap, setGap] = useState(msg);\r\n  useEffect(() => {\r\n    const id = setInterval(() => {\r\n      setGap(getTime(lastModified).msg);\r\n    }, runTime);\r\n    return () => clearInterval(id);\r\n  });\r\n  const style = {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\"\r\n  };\r\n  return (\r\n    <Section>\r\n      <Mesg>\r\n        <CancelButton\r\n          onClick={() => {\r\n            setTodo({ title: \"\", description: \"\", completed: false });\r\n            showOverlay(false);\r\n          }}\r\n        >\r\n          <i className='fas fa-times fa-2x' title='cancel'></i>\r\n        </CancelButton>\r\n        <small\r\n          style={{\r\n            color: \"#ccc\"\r\n          }}\r\n        >\r\n          {id}\r\n        </small>\r\n        <form action='' method='POST'>\r\n          <table colspacing='25px'>\r\n            <tbody>\r\n              <tr>\r\n                <td>Title</td>\r\n                <td>\r\n                  <InputField\r\n                    type='text'\r\n                    name={\"title\"}\r\n                    value={todo.title}\r\n                    onChange={e => handleChange(e)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>Description</td>\r\n                <td>\r\n                  <TextArea\r\n                    name={\"description\"}\r\n                    cols='30'\r\n                    rows='10'\r\n                    onChange={e => handleChange(e)}\r\n                    value={todo.description}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>Status</td>\r\n                <td>\r\n                  {todo.completed ? (\r\n                    <Pill style={{ backgroundColor: \"green\" }}>completed</Pill>\r\n                  ) : (\r\n                    <Pill>pending</Pill>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>Last Updated</td>\r\n                <td style={{ color: \"rgb(204, 204, 204)\" }}>\r\n                  {/* <i class='far fa-clock'></i> {getTime(lastModified)} */}\r\n                  <i className='far fa-clock'></i> {gap}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <div style={style}>\r\n            <div>\r\n              <Button onClick={e => updateTodo(e, id)}>update Todo</Button>\r\n              <Button onClick={e => deleteTodo(e, id)}>Delete Todo</Button>\r\n            </div>\r\n            <input\r\n              type='checkbox'\r\n              ref={checkboxRef}\r\n              checked={todo.completed}\r\n              hidden\r\n            />\r\n            <Checkbox\r\n              onClick={() => setTodo({ ...todo, completed: !todo.completed })}\r\n            >\r\n              {todo.completed ? (\r\n                <i\r\n                  style={{\r\n                    color: \"green\",\r\n                    margin: \"0 0 11px 14px\"\r\n                  }}\r\n                  className='fas fa-check'\r\n                ></i>\r\n              ) : null}\r\n            </Checkbox>\r\n          </div>\r\n        </form>\r\n      </Mesg>\r\n    </Section>\r\n  );\r\n}\r\n","export const getTime = stampedTime => {\r\n  let time = {};\r\n  let currentTime = Date.now();\r\n  let timeElapsed = (currentTime - stampedTime) / 1000;\r\n  if (timeElapsed < 60) {\r\n    time.msg = Math.floor(timeElapsed) + \" seconds ago\";\r\n    time.runTime = 1000;\r\n  } else if (timeElapsed >= 60 && timeElapsed < 3600) {\r\n    time.msg = Math.floor(timeElapsed / 60) + \" minutes ago\";\r\n    time.runTime = 60000;\r\n  } else if (timeElapsed >= 3600 && timeElapsed < 86400) {\r\n    time.msg = Math.floor(timeElapsed / (60 * 60)) + \" hours ago\";\r\n    time.runTime = 3600000;\r\n  } else if (timeElapsed >= 86400 && timeElapsed < 604800) {\r\n    time.msg = Math.floor(timeElapsed / (60 * 60 * 24)) + \" days ago\";\r\n    time.runTime = 86400000;\r\n  } else if (timeElapsed >= 604800 && timeElapsed < 2419200) {\r\n    time.msg = Math.floor(timeElapsed / (60 * 60 * 24 * 7)) + \" months ago\";\r\n    time.runTime = 604800000;\r\n  } else {\r\n    time.msg = \"a long time ago\";\r\n    time.runTime = \"\";\r\n  }\r\n  // console.log(time);\r\n  return time;\r\n};\r\n\r\nexport const arrangeList = arr => {\r\n  const compArr = arr.filter(el => el.completed);\r\n  const pendArr = arr.filter(el => !el.completed);\r\n  return [...pendArr, ...compArr];\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport TodoList from \"./components/todolist\";\nimport Input from \"./components/input\";\nimport Overlay from \"./components/overlay\";\nimport { Button } from \"./styles/main\";\nimport uuid from \"uuidv4\";\nimport { getTime, arrangeList } from \"./helpers/main\";\n\nconst LOCAL_STORAGE_KEY = \"LISTS\";\n\nexport default function App() {\n  const [todo, setTodo] = useState({\n    title: \"\",\n    description: \"\",\n    completed: false\n  });\n  const [list, setList] = useState([]);\n  const [showOverLay, SetShowOVerLay] = useState(false);\n  const [showInputOverLay, SetShowInputOverLay] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState({});\n\n  useEffect(() => {\n    const harvestedList = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (harvestedList) setList(JSON.parse(harvestedList));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(list));\n  }, [list]);\n\n  const handleChange = async e => {\n    await setTodo({ ...todo, [e.target.name]: e.target.value });\n    console.log(\"title: \" + todo.title);\n    console.log(\"description: \" + todo.description);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newTodo = {\n      id: uuid(),\n      title: todo.title,\n      description: todo.description,\n      completed: todo.completed,\n      lastModified: Date.now()\n    };\n    // console.log(newTodo);\n    setTodo({ title: \"\", description: \"\", completed: false });\n    if (todo.title.length < 5)\n      return alert(\"title should have 5 or more characters\");\n    const newList = arrangeList([...list, newTodo]);\n    setList(newList);\n    SetShowInputOverLay(!showInputOverLay);\n    // inputRef.current.focus();\n  };\n\n  const updateTodo = (e, id) => {\n    e.preventDefault();\n    const {\n      title: oldTitle,\n      description: oldDesc,\n      completed: oldStatus\n    } = selectedTodo;\n    const {\n      title: newTitle,\n      description: newDesc,\n      completed: newStatus\n    } = todo;\n    if (oldTitle === newTitle && oldDesc === newDesc && oldStatus === newStatus)\n      return alert(\"please change to update!\");\n    const cloneList = [...list];\n    const selectedTodoIndex = cloneList.findIndex(item => item.id === id);\n    cloneList[selectedTodoIndex].title = todo.title;\n    cloneList[selectedTodoIndex].description = todo.description;\n    cloneList[selectedTodoIndex].completed = todo.completed;\n    cloneList[selectedTodoIndex].lastModified = Date.now();\n    setList(arrangeList(cloneList));\n    SetShowOVerLay(!showOverLay);\n    setTodo({ title: \"\", description: \"\", completed: false });\n  };\n\n  const editTodo = id => {\n    const selectedTodo = list.filter(item => item.id === id)[0];\n    SetShowOVerLay(!showOverLay);\n    setSelectedTodo(selectedTodo);\n    const { title, description, completed } = selectedTodo;\n    setTodo({ title, description, completed });\n    // console.log(selectedTodo);\n  };\n\n  const deleteTodo = (e, id) => {\n    e.preventDefault();\n    if (\n      window.confirm(\n        `this action will permanently delete the todo item '${id}'.Do you want to continue?`\n      )\n    ) {\n      const delItem = list.filter(item => item.id !== id);\n      setList(delItem);\n      SetShowOVerLay(!showOverLay);\n      setTodo({ title: \"\", description: \"\", completed: false });\n    }\n  };\n\n  // const inputRef = useRef(null);\n  const checkboxRef = useRef(null);\n  return (\n    <>\n      {showOverLay ? (\n        <Overlay\n          todo={todo}\n          handleChange={handleChange}\n          selectedTodo={selectedTodo}\n          updateTodo={updateTodo}\n          deleteTodo={deleteTodo}\n          checkboxRef={checkboxRef}\n          showOverlay={SetShowOVerLay}\n          setTodo={setTodo}\n          getTime={getTime}\n        />\n      ) : null}\n      {showInputOverLay ? (\n        <Input\n          // Ref={inputRef}\n          todo={todo}\n          emptyTodo={setTodo}\n          handleChange={handleChange}\n          handleSubmit={handleSubmit}\n          showInput={SetShowInputOverLay}\n        />\n      ) : null}\n\n      <div\n        style={{\n          width: \"40%\",\n          zIndex: 999,\n          border: \"4px solid green\",\n          borderRadius: \"10px\",\n          margin: \"auto\",\n          padding: \"30px\"\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n          }}\n        >\n          <h1\n            style={{\n              textAlign: \"center\"\n            }}\n          >\n            TO-DO LIST\n          </h1>\n          <Button onClick={() => SetShowInputOverLay(!showInputOverLay)}>\n            + Add new\n          </Button>\n        </div>\n\n        <TodoList list={list} editTodo={editTodo} />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}